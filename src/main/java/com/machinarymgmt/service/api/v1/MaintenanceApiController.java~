package com.machinarymgmt.service.api.v1;

import com.machinarymgmt.service.api.builder.ApiResponseBuilder;
import com.machinarymgmt.service.api.config.dto.BaseApiResponse;
import com.machinarymgmt.service.api.config.dto.ErrorType;
import com.machinarymgmt.service.api.data.model.*;
import com.machinarymgmt.service.api.dto.MaintenanceLogDto;
import com.machinarymgmt.service.api.dto.MaintenanceLogRequestDto;
import com.machinarymgmt.service.api.mapper.MaintenanceLogMapper;
import com.machinarymgmt.service.api.mapper.MaintenancePartUsedMapper;
import com.machinarymgmt.service.api.mapper.MaintenanceReadingMapper;
import com.machinarymgmt.service.api.service.EquipmentService;
import com.machinarymgmt.service.api.service.ItemService;
import com.machinarymgmt.service.api.service.MachineryMaintenanceLogService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import static com.machinarymgmt.service.api.utils.Constants.MAINTENANCEAPI_URL;
import static com.machinarymgmt.service.api.utils.Constants.MAINTENANCE_URL;

@RestController
@RequiredArgsConstructor
@RequestMapping(MAINTENANCEAPI_URL)
public class MaintenanceApiController {

    private final MachineryMaintenanceLogService maintenanceLogService;
    private final EquipmentService equipmentService;
    private final ItemService itemService;
    private final MaintenanceLogMapper maintenanceLogMapper;
    private final MaintenancePartUsedMapper partUsedMapper;
    private final MaintenanceReadingMapper readingMapper;
    private final ApiResponseBuilder responseBuilder;

    @GetMapping
    public ResponseEntity<BaseApiResponse<List<MaintenanceLogDto>>> getAllMaintenanceLogs(
            @RequestParam(required = false, defaultValue = "0") Integer page,
            @RequestParam(required = false, defaultValue = "10") Integer size,
            Pageable pageable) {
        Page<MachineryMaintenanceLog> logsPage = maintenanceLogService.findAll(pageable);
        List<MaintenanceLogDto> logDtos = logsPage.getContent().stream()
                .map(maintenanceLogMapper::toDto)
                .collect(Collectors.toList());
        return ResponseEntity.ok(responseBuilder.buildSuccessResponse(logDtos));
    }

    @GetMapping("/{id}")
    public ResponseEntity<BaseApiResponse<MaintenanceLogDto>> getMaintenanceLogById(@PathVariable Long id) {
        return maintenanceLogService.findById(id)
                .map(log -> ResponseEntity.ok(responseBuilder.buildSuccessResponse(maintenanceLogMapper.toDto(log))))
                .orElseGet(() -> ResponseEntity.ok(responseBuilder.buildErrorResponse(
                        "Maintenance log not found with id: " + id,
                        ErrorType.NOT_FOUND)));
    }

    @GetMapping("/date-range")
    public ResponseEntity<BaseApiResponse<List<MaintenanceLogDto>>> getMaintenanceLogsByDateRange(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        List<MachineryMaintenanceLog> logs = maintenanceLogService.findByDateBetween(startDate, endDate);
        List<MaintenanceLogDto> logDtos = logs.stream()
                .map(maintenanceLogMapper::toDto)
                .collect(Collectors.toList());
        return ResponseEntity.ok(responseBuilder.buildSuccessResponse(logDtos));
    }

    @PostMapping
    public ResponseEntity<BaseApiResponse<MaintenanceLogDto>> createMaintenanceLog(
            @Valid @RequestBody MaintenanceLogRequestDto requestDto) {
        Optional<Equipment> equipmentOpt = equipmentService.findById(requestDto.getEquipmentId());
        if (equipmentOpt.isEmpty()) {
            return ResponseEntity.ok(responseBuilder.buildErrorResponse(
                    "Equipment not found with id: " + requestDto.getEquipmentId(),
                    ErrorType.NOT_FOUND));
        }

        MachineryMaintenanceLog maintenanceLog = maintenanceLogMapper.toEntity(requestDto);
        maintenanceLog.setEquipment(equipmentOpt.get());

        // Process parts used
        List<MaintenancePartsUsed> partsUsedList = new ArrayList<>();
        if (requestDto.getPartsUsed() != null && !requestDto.getPartsUsed().isEmpty()) {
            for (var partDto : requestDto.getPartsUsed()) {
                Optional<Item> itemOpt = itemService.findById(partDto.getItemId());
                if (itemOpt.isEmpty()) {
                    return ResponseEntity.ok(responseBuilder.buildErrorResponse(
                            "Item not found with id: " + partDto.getItemId(),
                            ErrorType.NOT_FOUND));
                }
                
                MaintenancePartsUsed partsUsed = partUsedMapper.fromDtoWithReferences(
                        partDto, maintenanceLog, itemOpt.get());
                partsUsedList.add(partsUsed);
            }
        }
        maintenanceLog.setPartsUsed(partsUsedList);

        // Process readings
        if (requestDto.getReadings() != null) {
            MaintenanceReading readings = readingMapper.fromDtoWithReferences(
                    requestDto.getReadings(), maintenanceLog);
            maintenanceLog.setReadings(readings);
        }

        MachineryMaintenanceLog savedLog = maintenanceLogService.save(maintenanceLog);
        return ResponseEntity.ok(responseBuilder.buildSuccessResponse(
                maintenanceLogMapper.toDto(savedLog),
                "Maintenance log created successfully"));
    }

    @PutMapping("/{id}")
    public ResponseEntity<BaseApiResponse<MaintenanceLogDto>> updateMaintenanceLog(
            @PathVariable Long id,
            @Valid @RequestBody MaintenanceLogRequestDto requestDto) {
        Optional<MachineryMaintenanceLog> existingLogOpt = maintenanceLogService.findById(id);
        if (existingLogOpt.isEmpty()) {
            return ResponseEntity.ok(responseBuilder.buildErrorResponse(
                    "Maintenance log not found with id: " + id,
                    ErrorType.NOT_FOUND));
        }

        Optional<Equipment> equipmentOpt = equipmentService.findById(requestDto.getEquipmentId());
        if (equipmentOpt.isEmpty()) {
            return ResponseEntity.ok(responseBuilder.buildErrorResponse(
                    "Equipment not found with id: " + requestDto.getEquipmentId(),
                    ErrorType.NOT_FOUND));
        }

        MachineryMaintenanceLog existingLog = existingLogOpt.get();
        maintenanceLogMapper.updateEntityFromDto(requestDto, existingLog);
        existingLog.setEquipment(equipmentOpt.get());

        // Update parts used
        List<MaintenancePartsUsed> partsUsedList = new ArrayList<>();
        if (requestDto.getPartsUsed() != null && !requestDto.getPartsUsed().isEmpty()) {
            for (var partDto : requestDto.getPartsUsed()) {
                Optional<Item> itemOpt = itemService.findById(partDto.getItemId());
                if (itemOpt.isEmpty()) {
                    return ResponseEntity.ok(responseBuilder.buildErrorResponse(
                            "Item not found with id: " + partDto.getItemId(),
                            ErrorType.NOT_FOUND));
                }
                
                MaintenancePartsUsed partsUsed = partUsedMapper.fromDtoWithReferences(
                        partDto, existingLog, itemOpt.get());
                partsUsedList.add(partsUsed);
            }
        }
        existingLog.setPartsUsed(partsUsedList);

        // Update readings
        if (requestDto.getReadings() != null) {
            MaintenanceReading readings = readingMapper.fromDtoWithReferences(
                    requestDto.getReadings(), existingLog);
            existingLog.setReadings(readings);
        }

        MachineryMaintenanceLog updatedLog = maintenanceLogService.save(existingLog);
        return ResponseEntity.ok(responseBuilder.buildSuccessResponse(
                maintenanceLogMapper.toDto(updatedLog),
                "Maintenance log updated successfully"));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<BaseApiResponse<Void>> deleteMaintenanceLog(@PathVariable Long id) {
        if (!maintenanceLogService.existsById(id)) {
            return ResponseEntity.ok(responseBuilder.buildErrorResponse(
                    "Maintenance log not found with id: " + id,
                    ErrorType.NOT_FOUND));
        }
        maintenanceLogService.deleteById(id);
        return ResponseEntity.ok(responseBuilder.buildSuccessResponse(null, "Maintenance log deleted successfully"));
    }
}

